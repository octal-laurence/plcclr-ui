{"version":3,"file":"static/webpack/static\\development\\pages\\client\\certification-form.js.70ca47039dca49e63902.hot-update.js","sources":["webpack:///./pages/client/certification-form/signature.js","webpack:///./pages/ui/library/signature/signature_pad.umd.js"],"sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Head from 'next/head';\r\n\r\nimport Box from '../../ui/box';\r\nimport InputText from '../../ui/inputText';\r\nimport Button from '../../ui/button';\r\n\r\nimport SignaturePad from '../../ui/library/signature/signature_pad.umd.js';\r\n\r\nclass Signature extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.supreme = props.supreme;\r\n  }\r\n  componentDidMount() {\r\n    console.log(SignaturePad);\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Box>\r\n          <h3>\r\n            Signature\r\n          </h3>\r\n          <p>\r\n            Write Digital Signature.\r\n          </p>\r\n        </Box>\r\n        <hr />\r\n        <Box>\r\n          <div id=\"signature-pad\" className=\"signature-pad\">\r\n            <div\r\n              className=\"signature-pad--body\"\r\n              align=\"center\"\r\n            >\r\n              <canvas\r\n                style={{\r\n                  borderStyle: 'groove'\r\n                }}\r\n              >\r\n              </canvas>\r\n            </div>\r\n            <div className=\"signature-pad--footer\">\r\n              <div className=\"description\" align=\"center\">Sign above</div>\r\n              <div className=\"signature-pad--actions\" align=\"center\">\r\n                <div>\r\n                  <button type=\"button\" className=\"button clear\" data-action=\"clear\">Clear</button>\r\n                  &nbsp;\r\n                  <button type=\"button\" className=\"button\" data-action=\"change-color\">Change color</button>\r\n                  &nbsp;\r\n                  <button type=\"button\" className=\"button\" data-action=\"undo\">Capture</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Box>\r\n        <br />\r\n        <Box>\r\n          <Button\r\n            type=\"button\"\r\n            onClick={(e) => {\r\n              this.supreme.switchPageHandler('summary');\r\n            }}\r\n          >\r\n            Confirm and Go to Next Tab\r\n          </Button>\r\n        </Box>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Signature;","/*!\r\n * Signature Pad v3.0.0-beta.1 | https://github.com/szimek/signature_pad\r\n * (c) 2018 Szymon Nowak | Released under the MIT license\r\n */\r\n\r\nexport default (function (global, factory) {\r\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\n  typeof define === 'function' && define.amd ? define(factory) :\r\n  (global.SignaturePad = factory());\r\n}(this, (function () { 'use strict';\r\n\r\n  var Point = (function () {\r\n      function Point(x, y, time) {\r\n          this.x = x;\r\n          this.y = y;\r\n          this.time = time || Date.now();\r\n      }\r\n      Point.prototype.distanceTo = function (start) {\r\n          return Math.sqrt(Math.pow(this.x - start.x, 2) + Math.pow(this.y - start.y, 2));\r\n      };\r\n      Point.prototype.equals = function (other) {\r\n          return this.x === other.x && this.y === other.y && this.time === other.time;\r\n      };\r\n      Point.prototype.velocityFrom = function (start) {\r\n          return (this.time !== start.time) ? this.distanceTo(start) / (this.time - start.time) : 0;\r\n      };\r\n      return Point;\r\n  }());\r\n\r\n  var Bezier = (function () {\r\n      function Bezier(startPoint, control2, control1, endPoint, startWidth, endWidth) {\r\n          this.startPoint = startPoint;\r\n          this.control2 = control2;\r\n          this.control1 = control1;\r\n          this.endPoint = endPoint;\r\n          this.startWidth = startWidth;\r\n          this.endWidth = endWidth;\r\n      }\r\n      Bezier.fromPoints = function (points, widths) {\r\n          var c2 = this.calculateControlPoints(points[0], points[1], points[2]).c2;\r\n          var c3 = this.calculateControlPoints(points[1], points[2], points[3]).c1;\r\n          return new Bezier(points[1], c2, c3, points[2], widths.start, widths.end);\r\n      };\r\n      Bezier.calculateControlPoints = function (s1, s2, s3) {\r\n          var dx1 = s1.x - s2.x;\r\n          var dy1 = s1.y - s2.y;\r\n          var dx2 = s2.x - s3.x;\r\n          var dy2 = s2.y - s3.y;\r\n          var m1 = { x: (s1.x + s2.x) / 2.0, y: (s1.y + s2.y) / 2.0 };\r\n          var m2 = { x: (s2.x + s3.x) / 2.0, y: (s2.y + s3.y) / 2.0 };\r\n          var l1 = Math.sqrt((dx1 * dx1) + (dy1 * dy1));\r\n          var l2 = Math.sqrt((dx2 * dx2) + (dy2 * dy2));\r\n          var dxm = (m1.x - m2.x);\r\n          var dym = (m1.y - m2.y);\r\n          var k = l2 / (l1 + l2);\r\n          var cm = { x: m2.x + (dxm * k), y: m2.y + (dym * k) };\r\n          var tx = s2.x - cm.x;\r\n          var ty = s2.y - cm.y;\r\n          return {\r\n              c1: new Point(m1.x + tx, m1.y + ty),\r\n              c2: new Point(m2.x + tx, m2.y + ty)\r\n          };\r\n      };\r\n      Bezier.prototype.length = function () {\r\n          var steps = 10;\r\n          var length = 0;\r\n          var px;\r\n          var py;\r\n          for (var i = 0; i <= steps; i += 1) {\r\n              var t = i / steps;\r\n              var cx = this.point(t, this.startPoint.x, this.control1.x, this.control2.x, this.endPoint.x);\r\n              var cy = this.point(t, this.startPoint.y, this.control1.y, this.control2.y, this.endPoint.y);\r\n              if (i > 0) {\r\n                  var xdiff = cx - px;\r\n                  var ydiff = cy - py;\r\n                  length += Math.sqrt((xdiff * xdiff) + (ydiff * ydiff));\r\n              }\r\n              px = cx;\r\n              py = cy;\r\n          }\r\n          return length;\r\n      };\r\n      Bezier.prototype.point = function (t, start, c1, c2, end) {\r\n          return (start * (1.0 - t) * (1.0 - t) * (1.0 - t))\r\n              + (3.0 * c1 * (1.0 - t) * (1.0 - t) * t)\r\n              + (3.0 * c2 * (1.0 - t) * t * t)\r\n              + (end * t * t * t);\r\n      };\r\n      return Bezier;\r\n  }());\r\n\r\n  function throttle(fn, wait) {\r\n      if (wait === void 0) { wait = 250; }\r\n      var previous = 0;\r\n      var timeout = null;\r\n      var result;\r\n      var storedContext;\r\n      var storedArgs;\r\n      var later = function () {\r\n          previous = Date.now();\r\n          timeout = null;\r\n          result = fn.apply(storedContext, storedArgs);\r\n          if (!timeout) {\r\n              storedContext = null;\r\n              storedArgs = [];\r\n          }\r\n      };\r\n      return function () {\r\n          var args = [];\r\n          for (var _i = 0; _i < arguments.length; _i++) {\r\n              args[_i] = arguments[_i];\r\n          }\r\n          var now = Date.now();\r\n          var remaining = wait - (now - previous);\r\n          storedContext = this;\r\n          storedArgs = args;\r\n          if (remaining <= 0 || remaining > wait) {\r\n              if (timeout) {\r\n                  clearTimeout(timeout);\r\n                  timeout = null;\r\n              }\r\n              previous = now;\r\n              result = fn.apply(storedContext, storedArgs);\r\n              if (!timeout) {\r\n                  storedContext = null;\r\n                  storedArgs = [];\r\n              }\r\n          }\r\n          else if (!timeout) {\r\n              timeout = setTimeout(later, remaining);\r\n          }\r\n          return result;\r\n      };\r\n  }\r\n\r\n  var SignaturePad = (function () {\r\n      function SignaturePad(canvas, options) {\r\n          if (options === void 0) { options = {}; }\r\n          var _this = this;\r\n          this.canvas = canvas;\r\n          this.options = options;\r\n          this._handleMouseDown = function (event) {\r\n              if (event.which === 1) {\r\n                  _this._mouseButtonDown = true;\r\n                  _this._strokeBegin(event);\r\n              }\r\n          };\r\n          this._handleMouseMove = function (event) {\r\n              if (_this._mouseButtonDown) {\r\n                  _this._strokeMoveUpdate(event);\r\n              }\r\n          };\r\n          this._handleMouseUp = function (event) {\r\n              if (event.which === 1 && _this._mouseButtonDown) {\r\n                  _this._mouseButtonDown = false;\r\n                  _this._strokeEnd(event);\r\n              }\r\n          };\r\n          this._handleTouchStart = function (event) {\r\n              event.preventDefault();\r\n              if (event.targetTouches.length === 1) {\r\n                  var touch = event.changedTouches[0];\r\n                  _this._strokeBegin(touch);\r\n              }\r\n          };\r\n          this._handleTouchMove = function (event) {\r\n              event.preventDefault();\r\n              var touch = event.targetTouches[0];\r\n              _this._strokeMoveUpdate(touch);\r\n          };\r\n          this._handleTouchEnd = function (event) {\r\n              var wasCanvasTouched = event.target === _this.canvas;\r\n              if (wasCanvasTouched) {\r\n                  event.preventDefault();\r\n                  var touch = event.changedTouches[0];\r\n                  _this._strokeEnd(touch);\r\n              }\r\n          };\r\n          this.velocityFilterWeight = options.velocityFilterWeight || 0.7;\r\n          this.minWidth = options.minWidth || 0.5;\r\n          this.maxWidth = options.maxWidth || 2.5;\r\n          this.throttle = (\"throttle\" in options ? options.throttle : 16);\r\n          this.minDistance = (\"minDistance\" in options ? options.minDistance : 5);\r\n          if (this.throttle) {\r\n              this._strokeMoveUpdate = throttle(SignaturePad.prototype._strokeUpdate, this.throttle);\r\n          }\r\n          else {\r\n              this._strokeMoveUpdate = SignaturePad.prototype._strokeUpdate;\r\n          }\r\n          this.dotSize = options.dotSize || function () {\r\n              return (this.minWidth + this.maxWidth) / 2;\r\n          };\r\n          this.penColor = options.penColor || \"black\";\r\n          this.backgroundColor = options.backgroundColor || \"rgba(0,0,0,0)\";\r\n          this.onBegin = options.onBegin;\r\n          this.onEnd = options.onEnd;\r\n          this._ctx = canvas.getContext(\"2d\");\r\n          this.clear();\r\n          this.on();\r\n      }\r\n      SignaturePad.prototype.clear = function () {\r\n          var ctx = this._ctx;\r\n          var canvas = this.canvas;\r\n          ctx.fillStyle = this.backgroundColor;\r\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n          this._data = [];\r\n          this._reset();\r\n          this._isEmpty = true;\r\n      };\r\n      SignaturePad.prototype.fromDataURL = function (dataUrl, options, callback) {\r\n          var _this = this;\r\n          if (options === void 0) { options = {}; }\r\n          var image = new Image();\r\n          var ratio = options.ratio || window.devicePixelRatio || 1;\r\n          var width = options.width || (this.canvas.width / ratio);\r\n          var height = options.height || (this.canvas.height / ratio);\r\n          this._reset();\r\n          image.onload = function () {\r\n              _this._ctx.drawImage(image, 0, 0, width, height);\r\n              if (callback) {\r\n                  callback();\r\n              }\r\n          };\r\n          image.onerror = function (error) {\r\n              if (callback) {\r\n                  callback(error);\r\n              }\r\n          };\r\n          image.src = dataUrl;\r\n          this._isEmpty = false;\r\n      };\r\n      SignaturePad.prototype.toDataURL = function (type, encoderOptions) {\r\n          if (type === void 0) { type = \"image/png\"; }\r\n          switch (type) {\r\n              case \"image/svg+xml\":\r\n                  return this._toSVG();\r\n              default:\r\n                  return this.canvas.toDataURL(type, encoderOptions);\r\n          }\r\n      };\r\n      SignaturePad.prototype.on = function () {\r\n          this._handleMouseEvents();\r\n          if (\"ontouchstart\" in window) {\r\n              this._handleTouchEvents();\r\n          }\r\n      };\r\n      SignaturePad.prototype.off = function () {\r\n          this.canvas.style.msTouchAction = \"auto\";\r\n          this.canvas.style.touchAction = \"auto\";\r\n          this.canvas.removeEventListener(\"mousedown\", this._handleMouseDown);\r\n          this.canvas.removeEventListener(\"mousemove\", this._handleMouseMove);\r\n          document.removeEventListener(\"mouseup\", this._handleMouseUp);\r\n          this.canvas.removeEventListener(\"touchstart\", this._handleTouchStart);\r\n          this.canvas.removeEventListener(\"touchmove\", this._handleTouchMove);\r\n          this.canvas.removeEventListener(\"touchend\", this._handleTouchEnd);\r\n      };\r\n      SignaturePad.prototype.isEmpty = function () {\r\n          return this._isEmpty;\r\n      };\r\n      SignaturePad.prototype.fromData = function (pointGroups) {\r\n          var _this = this;\r\n          this.clear();\r\n          this._fromData(pointGroups, function (_a) {\r\n              var color = _a.color, curve = _a.curve;\r\n              return _this._drawCurve({ color: color, curve: curve });\r\n          }, function (_a) {\r\n              var color = _a.color, point = _a.point;\r\n              return _this._drawDot({ color: color, point: point });\r\n          });\r\n          this._data = pointGroups;\r\n      };\r\n      SignaturePad.prototype.toData = function () {\r\n          return this._data;\r\n      };\r\n      SignaturePad.prototype._strokeBegin = function (event) {\r\n          var newPointGroup = {\r\n              color: this.penColor,\r\n              points: []\r\n          };\r\n          this._data.push(newPointGroup);\r\n          this._reset();\r\n          this._strokeUpdate(event);\r\n          if (typeof this.onBegin === \"function\") {\r\n              this.onBegin(event);\r\n          }\r\n      };\r\n      SignaturePad.prototype._strokeUpdate = function (event) {\r\n          var x = event.clientX;\r\n          var y = event.clientY;\r\n          var point = this._createPoint(x, y);\r\n          var lastPointGroup = this._data[this._data.length - 1];\r\n          var lastPoints = lastPointGroup.points;\r\n          var lastPoint = lastPoints.length > 0 && lastPoints[lastPoints.length - 1];\r\n          var isLastPointTooClose = lastPoint ? point.distanceTo(lastPoint) <= this.minDistance : false;\r\n          var color = lastPointGroup.color;\r\n          if (!lastPoint || !(lastPoint && isLastPointTooClose)) {\r\n              var curve = this._addPoint(point);\r\n              if (!lastPoint) {\r\n                  this._drawDot({ color: color, point: point });\r\n              }\r\n              else if (curve) {\r\n                  this._drawCurve({ color: color, curve: curve });\r\n              }\r\n              lastPoints.push({\r\n                  time: point.time,\r\n                  x: point.x,\r\n                  y: point.y\r\n              });\r\n          }\r\n      };\r\n      SignaturePad.prototype._strokeEnd = function (event) {\r\n          this._strokeUpdate(event);\r\n          if (typeof this.onEnd === \"function\") {\r\n              this.onEnd(event);\r\n          }\r\n      };\r\n      SignaturePad.prototype._handleMouseEvents = function () {\r\n          this._mouseButtonDown = false;\r\n          this.canvas.addEventListener(\"mousedown\", this._handleMouseDown);\r\n          this.canvas.addEventListener(\"mousemove\", this._handleMouseMove);\r\n          document.addEventListener(\"mouseup\", this._handleMouseUp);\r\n      };\r\n      SignaturePad.prototype._handleTouchEvents = function () {\r\n          this.canvas.style.msTouchAction = \"none\";\r\n          this.canvas.style.touchAction = \"none\";\r\n          this.canvas.addEventListener(\"touchstart\", this._handleTouchStart);\r\n          this.canvas.addEventListener(\"touchmove\", this._handleTouchMove);\r\n          this.canvas.addEventListener(\"touchend\", this._handleTouchEnd);\r\n      };\r\n      SignaturePad.prototype._reset = function () {\r\n          this._points = [];\r\n          this._lastVelocity = 0;\r\n          this._lastWidth = (this.minWidth + this.maxWidth) / 2;\r\n          this._ctx.fillStyle = this.penColor;\r\n      };\r\n      SignaturePad.prototype._createPoint = function (x, y) {\r\n          var rect = this.canvas.getBoundingClientRect();\r\n          return new Point(x - rect.left, y - rect.top, new Date().getTime());\r\n      };\r\n      SignaturePad.prototype._addPoint = function (point) {\r\n          var _points = this._points;\r\n          _points.push(point);\r\n          if (_points.length > 2) {\r\n              if (_points.length === 3) {\r\n                  _points.unshift(_points[0]);\r\n              }\r\n              var widths = this._calculateCurveWidths(_points[1], _points[2]);\r\n              var curve = Bezier.fromPoints(_points, widths);\r\n              _points.shift();\r\n              return curve;\r\n          }\r\n          return null;\r\n      };\r\n      SignaturePad.prototype._calculateCurveWidths = function (startPoint, endPoint) {\r\n          var velocity = (this.velocityFilterWeight * endPoint.velocityFrom(startPoint))\r\n              + ((1 - this.velocityFilterWeight) * this._lastVelocity);\r\n          var newWidth = this._strokeWidth(velocity);\r\n          var widths = {\r\n              end: newWidth,\r\n              start: this._lastWidth\r\n          };\r\n          this._lastVelocity = velocity;\r\n          this._lastWidth = newWidth;\r\n          return widths;\r\n      };\r\n      SignaturePad.prototype._strokeWidth = function (velocity) {\r\n          return Math.max(this.maxWidth / (velocity + 1), this.minWidth);\r\n      };\r\n      SignaturePad.prototype._drawCurveSegment = function (x, y, width) {\r\n          var ctx = this._ctx;\r\n          ctx.moveTo(x, y);\r\n          ctx.arc(x, y, width, 0, 2 * Math.PI, false);\r\n          this._isEmpty = false;\r\n      };\r\n      SignaturePad.prototype._drawCurve = function (_a) {\r\n          var color = _a.color, curve = _a.curve;\r\n          var ctx = this._ctx;\r\n          var widthDelta = curve.endWidth - curve.startWidth;\r\n          var drawSteps = Math.floor(curve.length()) * 2;\r\n          ctx.beginPath();\r\n          ctx.fillStyle = color;\r\n          for (var i = 0; i < drawSteps; i += 1) {\r\n              var t = i / drawSteps;\r\n              var tt = t * t;\r\n              var ttt = tt * t;\r\n              var u = 1 - t;\r\n              var uu = u * u;\r\n              var uuu = uu * u;\r\n              var x = uuu * curve.startPoint.x;\r\n              x += 3 * uu * t * curve.control1.x;\r\n              x += 3 * u * tt * curve.control2.x;\r\n              x += ttt * curve.endPoint.x;\r\n              var y = uuu * curve.startPoint.y;\r\n              y += 3 * uu * t * curve.control1.y;\r\n              y += 3 * u * tt * curve.control2.y;\r\n              y += ttt * curve.endPoint.y;\r\n              var width = curve.startWidth + (ttt * widthDelta);\r\n              this._drawCurveSegment(x, y, width);\r\n          }\r\n          ctx.closePath();\r\n          ctx.fill();\r\n      };\r\n      SignaturePad.prototype._drawDot = function (_a) {\r\n          var color = _a.color, point = _a.point;\r\n          var ctx = this._ctx;\r\n          var width = typeof this.dotSize === \"function\" ? this.dotSize() : this.dotSize;\r\n          ctx.beginPath();\r\n          this._drawCurveSegment(point.x, point.y, width);\r\n          ctx.closePath();\r\n          ctx.fillStyle = color;\r\n          ctx.fill();\r\n      };\r\n      SignaturePad.prototype._fromData = function (pointGroups, drawCurve, drawDot) {\r\n          for (var _i = 0, pointGroups_1 = pointGroups; _i < pointGroups_1.length; _i++) {\r\n              var group = pointGroups_1[_i];\r\n              var color = group.color, points = group.points;\r\n              if (points.length > 1) {\r\n                  for (var j = 0; j < points.length; j += 1) {\r\n                      var basicPoint = points[j];\r\n                      var point = new Point(basicPoint.x, basicPoint.y, basicPoint.time);\r\n                      this.penColor = color;\r\n                      if (j === 0) {\r\n                          this._reset();\r\n                      }\r\n                      var curve = this._addPoint(point);\r\n                      if (curve) {\r\n                          drawCurve({ color: color, curve: curve });\r\n                      }\r\n                  }\r\n              }\r\n              else {\r\n                  this._reset();\r\n                  drawDot({\r\n                      color: color,\r\n                      point: points[0]\r\n                  });\r\n              }\r\n          }\r\n      };\r\n      SignaturePad.prototype._toSVG = function () {\r\n          var _this = this;\r\n          var pointGroups = this._data;\r\n          var ratio = Math.max(window.devicePixelRatio || 1, 1);\r\n          var minX = 0;\r\n          var minY = 0;\r\n          var maxX = this.canvas.width / ratio;\r\n          var maxY = this.canvas.height / ratio;\r\n          var svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\r\n          svg.setAttribute(\"width\", this.canvas.width.toString());\r\n          svg.setAttribute(\"height\", this.canvas.height.toString());\r\n          this._fromData(pointGroups, function (_a) {\r\n              var color = _a.color, curve = _a.curve;\r\n              var path = document.createElement(\"path\");\r\n              if (!isNaN(curve.control1.x) &&\r\n                  !isNaN(curve.control1.y) &&\r\n                  !isNaN(curve.control2.x) &&\r\n                  !isNaN(curve.control2.y)) {\r\n                  var attr = \"M \" + curve.startPoint.x.toFixed(3) + \",\" + curve.startPoint.y.toFixed(3) + \" \"\r\n                      + (\"C \" + curve.control1.x.toFixed(3) + \",\" + curve.control1.y.toFixed(3) + \" \")\r\n                      + (curve.control2.x.toFixed(3) + \",\" + curve.control2.y.toFixed(3) + \" \")\r\n                      + (curve.endPoint.x.toFixed(3) + \",\" + curve.endPoint.y.toFixed(3));\r\n                  path.setAttribute(\"d\", attr);\r\n                  path.setAttribute(\"stroke-width\", (curve.endWidth * 2.25).toFixed(3));\r\n                  path.setAttribute(\"stroke\", color);\r\n                  path.setAttribute(\"fill\", \"none\");\r\n                  path.setAttribute(\"stroke-linecap\", \"round\");\r\n                  svg.appendChild(path);\r\n              }\r\n          }, function (_a) {\r\n              var color = _a.color, point = _a.point;\r\n              var circle = document.createElement(\"circle\");\r\n              var dotSize = typeof _this.dotSize === \"function\" ? _this.dotSize() : _this.dotSize;\r\n              circle.setAttribute(\"r\", dotSize.toString());\r\n              circle.setAttribute(\"cx\", point.x.toString());\r\n              circle.setAttribute(\"cy\", point.y.toString());\r\n              circle.setAttribute(\"fill\", color);\r\n              svg.appendChild(circle);\r\n          });\r\n          var prefix = \"data:image/svg+xml;base64,\";\r\n          var header = \"<svg\"\r\n              + \" xmlns=\\\"http://www.w3.org/2000/svg\\\"\"\r\n              + \" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\"\r\n              + (\" viewBox=\\\"\" + minX + \" \" + minY + \" \" + maxX + \" \" + maxY + \"\\\"\")\r\n              + (\" width=\\\"\" + maxX + \"\\\"\")\r\n              + (\" height=\\\"\" + maxY + \"\\\"\")\r\n              + \">\";\r\n          var body = svg.innerHTML;\r\n          if (body === undefined) {\r\n              var dummy = document.createElement(\"dummy\");\r\n              var nodes = svg.childNodes;\r\n              dummy.innerHTML = \"\";\r\n              for (var i = 0; i < nodes.length; i += 1) {\r\n                  dummy.appendChild(nodes[i].cloneNode(true));\r\n              }\r\n              body = dummy.innerHTML;\r\n          }\r\n          var footer = \"</svg>\";\r\n          var data = header + body + footer;\r\n          return prefix + btoa(data);\r\n      };\r\n      return SignaturePad;\r\n  }());\r\n\r\n  return SignaturePad;\r\n\r\n})));\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AAHA;AAIA;AACA;;;AAAA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AAYA;AAAA;AAAA;AAEA;AACA;AAFA;AAKA;AACA;AADA;AADA;AAOA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AAJA;AAWA;;;;AA7DA;AACA;AA+DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1EA;;;;AAKA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAIA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAOA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}